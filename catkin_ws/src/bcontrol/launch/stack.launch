<launch>
  <arg name="platform" doc="The environment of the launch site. `sim` or `robot`" />
  <group unless="$(eval arg('platform') in ['sim', 'robot'])">
    <node pkg="bcontrol" type="terminate.py" name="terminate" output="screen" args="'Invalid argument: platform'" required="true" />
  </group>
  <arg name="enable_detector" default="true" doc="Enable the detector node" />

  <!-- Launch the controller -->
  <node pkg="bcontrol" type="controller.py" name="bcontrol_node" output="log"/>

  <!-- Launch the planner -->
  <node pkg="bcontrol" type="planner.py" name="bplan_node" output="log"/>

  <!-- Launch the detector -->
  <include file="$(find bcontrol)/launch/detector.launch" if="$(eval arg('enable_detector'))">
    <arg name="platform" value="$(arg platform)" />
  </include>

  <!-- Launch message corruption nodes -->
  <node name="global_odom_corruption" pkg="bcontrol" type="message_corruption.py" required="true">
    <param name="topic_name" value="/global_localization/robot/odom"/>
    <param name="message_type" value="nav_msgs/Odometry"/>
  </node>
  <node name="wheel_odom_corruption" pkg="bcontrol" type="message_corruption.py" required="true">
    <param name="topic_name" value="/jackal_velocity_controller/odom"/>
    <param name="message_type" value="nav_msgs/Odometry"/>
  </node>
  <!-- TODO: add IMU corruption -->

  <!--
    Publish the map->odom transform based on global position messages.

    Directly transform global measurements to tf (no filtering).
    This can produce jumps in the map->odom transform when the global measurements are updated.

    More info: https://discourse.ros.org/t/map-base-odom-as-alternative-for-rep-105-recommended-frame-order/25095
  -->
  <node name="map_to_odom_publisher" pkg="map_to_odom_publisher" type="map_to_odom_publisher" output="log" required="true">
    <param name="odom_topic" value="/global_localization/robot/odom/vulnerable"/>
    <!-- <param name="odom_topic" value="/global_localization/robot/odom"/> -->
    <param name="publish_frequency" value="50"/>
  </node>

  <!-- EKF (global) -->
  <!-- <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization_global" required="true">
    <rosparam command="load" file="$(find bcontrol)/config/robot_localization.global.sim.yaml" if="$(eval arg('platform') == 'sim')" />
    <rosparam command="load" file="$(find bcontrol)/config/robot_localization.global.robot.yaml" if="$(eval arg('platform') == 'robot')" />
    <remap from="odometry/filtered" to="/odometry/global_filtered" />
  </node> -->

  <!-- EKF (local) -->
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization_local" required="true">
    <rosparam command="load" file="$(find bcontrol)/config/robot_localization.local.sim.yaml" if="$(eval arg('platform') == 'sim')" />
    <rosparam command="load" file="$(find bcontrol)/config/robot_localization.local.robot.yaml" if="$(eval arg('platform') == 'robot')" />
    <remap from="odometry/filtered" to="/odometry/local_filtered" />
  </node>
</launch>